#¡Erupción LINQ!

 Objetivos:
	- Crear una aplicación de consola para consultar datos utilizando los datos proporcionados.​
	- Extraer datos desde un conjunto de otros mediante consultas LINQ.​
	- Verificar que se extraigan los datos correctos mostrando los datos consultados en la consola.


Preparación del Proyecto:
1. Abre una nueva aplicación de consola. Por si lo has olvidado, el comando para hacerlo es:​

dotnet new console -o TuNombreDeProyectocopy
2. Crea un archivo llamado Eruption.cs copia y pega el código de abajo para crear tu clase "Eruption":​

public class Eruption
{
    public string Volcano { get; set; }
    public int Year { get; set; }
    public string Location { get; set; }
    public int ElevationInMeters { get; set; }
    public string Type { get; set; }
    public Eruption(string volcano, int year, string location, int elevationInMeters, string type)
    {
        Volcano = volcano;
        Year = year;
        Location = location;
        ElevationInMeters = elevationInMeters;
        Type = type;
    }
    public override string ToString()
    {
        return $@"
Name: {Volcano}
Year: {Year}
Location: {Location}
Elevation: {ElevationInMeters} meters
Type: {Type}
            ";
    }
}

3. Copia y pega el siguiente fragmento de código en tu programa​

List<Eruption> eruptions = new List<Eruption>()
{
    new Eruption("La Palma", 2021, "Canary Is", 2426, "Stratovolcano"),
    new Eruption("Villarrica", 1963, "Chile", 2847, "Stratovolcano"),
    new Eruption("Chaiten", 2008, "Chile", 1122, "Caldera"),
    new Eruption("Kilauea", 2018, "Hawaiian Is", 1122, "Shield Volcano"),
    new Eruption("Hekla", 1206, "Iceland", 1490, "Stratovolcano"),
    new Eruption("Taupo", 1910, "New Zealand", 760, "Caldera"),
    new Eruption("Lengai, Ol Doinyo", 1927, "Tanzania", 2962, "Stratovolcano"),
    new Eruption("Santorini", 46,"Greece", 367, "Shield Volcano"),
    new Eruption("Katla", 950, "Iceland", 1490, "Subglacial Volcano"),
    new Eruption("Aira", 766, "Japan", 1117, "Stratovolcano"),
    new Eruption("Ceboruco", 930, "Mexico", 2280, "Stratovolcano"),
    new Eruption("Etna", 1329, "Italy", 3320, "Stratovolcano"),
    new Eruption("Bardarbunga", 1477, "Iceland", 2000, "Stratovolcano")
};
// Example Query - Prints all Stratovolcano eruptions
IEnumerable<Eruption> stratovolcanoEruptions = eruptions.Where(c => c.Type == "Stratovolcano");
PrintEach(stratovolcanoEruptions, "Stratovolcano eruptions.");
// Execute Assignment Tasks here!
 
// Helper method to print each item in a List or IEnumerable.This should remain at the bottom of your class!
static void PrintEach(IEnumerable<dynamic> items, string msg = "")
{
    Console.WriteLine("\n" + msg);
    foreach (var item in items)
    {
        Console.WriteLine(item.ToString());
    }
}


Fuente: National Geophysical Data Center / World Data Service (NGDC/WDS): NCEI/WDS Global Significant Volcanic Eruptions Database. Centros Nacionales de Información Medioambiental de la NOAA.​ doi:10.7289/V5JW8BSH. Consultado el 20/05/2022.​

1. Use LINQ to find the first eruption that is in Chile and print the result.

2. Find the first eruption from the "Hawaiian Is" location and print it. If none is found, print "No Hawaiian Is Eruption found."

3. Find the first eruption that is after the year 1900 AND in "New Zealand", then print it.

4. Find all eruptions where the volcano's elevation is over 2000m and print them.

5. Find all eruptions where the volcano's name starts with "L" and print them. Also print the number of eruptions found.

6. Find the highest elevation, and print only that integer (Hint: Look up how to use LINQ to find the max!)

7. Use the highest elevation variable to find a print the name of the Volcano with that elevation.

8. Print all Volcano names alphabetically.

9. Print all the eruptions that happened before the year 1000 CE alphabetically according to Volcano name.

BONUS: Redo the last query, but this time use LINQ to only select the volcano's name so that only the names are printed.​